%---- Code-Package-2 : Generating ensembles of generalized S matrices -----
%---- Performs the following 

%     1) Generates an ensemble of thin disorders and estimate their 
%        generalized S matrices 
%     2) Cascades the S matrices of those thin disorders and estimate the
%        equivalent S matrix of a thicker disorder
%     3) Randomly shuffle the order of cascading and create an ensemble of
%        generalized S matrices of thicker disorders    

clear 
close all

new_run_flag=0;  % Set the flag=1 if a new run is required. 
                 % If flag=1, one may reduce the size of krefW according 
                 % to one's memory availability. 

no_of_thick_slabs=1000; % Ensemble size. These many generalized S matrices
                       % are generated by randomly shuffling the order of
                       % cascading.                  
if new_run_flag==1                 
initialisation_common
main_generate_Smatrices
%--------------------------------------------------------------------------
cascaded_sample=zeros(size(eps_profile_array,1),...
    size(eps_profile_array,2)*size(eps_profile_array,3));
for icount=1:size(eps_profile_array,3)
zindex=(icount-1)*size(eps_profile_array,2)+1 : (icount)*size(eps_profile_array,2);
cascaded_sample(:,zindex)=eps_profile_array(:,:,icount);
end
%--------------------- Plot the cascaded slab -----------------------------
size_of_font=20;
figure('Position', [50 50 500 700],'color','W');
colormap(jet);
imagesc([0 init_data.kref*init_data.dz*(size(cascaded_sample,2)-1)],...
    [0 init_data.kref*init_data.dy*(init_data.Ny-1)],(cascaded_sample));  
xlabel('$k_{ref}z$','Interpreter','Latex')
ylabel('$k_{ref}y$','Interpreter','Latex')
axis xy 
axis equal tight
set(gca,'FontSize',size_of_font) 
colorbar
sprintf('No of particles is %d',length(find(eps_profile)))
title('$\Delta \epsilon(z,y)$','Interpreter','Latex')
gcf.RendererMode='manual';
%--------------------- Plot the thinner slabs ------------------------------
figure('Position', [0 0 1000 700],'color','W');
subplot(1,4,1)
colormap(bone);
imagesc([0 init_data.kref*init_data.dy*(init_data.Nz-1)],...
    [0 init_data.kref*init_data.dy*(init_data.Ny-1)],eps_profile_array(:,:,1));  
xlabel('$k_{ref}z$','Interpreter','Latex')
ylabel('$k_{ref}y$','Interpreter','Latex')
axis xy 
axis equal tight
set(gca,'FontSize',size_of_font) 
colorbar
sprintf('No of particles is %d',length(find(eps_profile)))
title('$\Delta \epsilon(z,y)$','Interpreter','Latex')
gcf.RendererMode='manual';

subplot(1,4,2)
colormap(jet);
imagesc([0 init_data.kref*init_data.dy*(init_data.Nz-1)],...
    [0 init_data.kref*init_data.dy*(init_data.Ny-1)],eps_profile_array(:,:,2));  
xlabel('$k_{ref}z$','Interpreter','Latex')
ylabel('$k_{ref}y$','Interpreter','Latex')
axis xy 
axis equal tight
set(gca,'FontSize',size_of_font) 
colorbar
sprintf('No of particles is %d',length(find(eps_profile)))
title('$\Delta \epsilon(z,y)$','Interpreter','Latex')
gcf.RendererMode='manual';

subplot(1,4,3)
colormap(jet);
imagesc([0 init_data.kref*init_data.dy*(init_data.Nz-1)],...
    [0 init_data.kref*init_data.dy*(init_data.Ny-1)],eps_profile_array(:,:,4));  
xlabel('$k_{ref}z$','Interpreter','Latex')
ylabel('$k_{ref}y$','Interpreter','Latex')
axis xy 
axis equal tight
set(gca,'FontSize',size_of_font) 
colorbar
sprintf('No of particles is %d',length(find(eps_profile)))
title('$\Delta \epsilon(z,y)$','Interpreter','Latex')
gcf.RendererMode='manual';


subplot(1,4,4)
colormap(jet);
imagesc([0 init_data.kref*init_data.dy*(init_data.Nz-1)],...
    [0 init_data.kref*init_data.dy*(init_data.Ny-1)],eps_profile_array(:,:,end));  
xlabel('$k_{ref}z$','Interpreter','Latex')
ylabel('$k_{ref}y$','Interpreter','Latex')
axis xy 
axis equal tight
set(gca,'FontSize',size_of_font) 
colorbar
sprintf('No of particles is %d',length(find(eps_profile)))
title('$\Delta \epsilon(z,y)$','Interpreter','Latex')
gcf.RendererMode='manual';
end


if new_run_flag==0
% If a new run is not needed, load the existing saved data.   
    if isfile('saved-data-Code-Package-2.mat')
     % File exists.
     load('saved-data-Code-Package-2.mat'); 
    else
     % File does not exist and needs to be downloaded from the Zenodo 
     % repository.
     disp('Load the saved-data-Code-Package-2.mat file')
     [selected_data_name,data_path] = uigetfile('*.mat');
         if strcmp(selected_data_name,'saved-data-Code-Package-2.mat')
             load(selected_data_name);
             disp('Loaded saved-data-Code-Package-2.mat file')
         else
             disp('Right .mat not selected !!')
         end
    end   
 
else
disp('Warning : Overwriting the previously saved data...')
pause(5);
save('saved-data-Code-Package-2.mat') % If a new run is needed, save the workspace data 
end


%---------------- Generate an ensemble of thick scatterers ----------------
main_cascading;
%------ Eigenchannel transmission statistics involving disorder ensemble --
%------------------- load the ensemble of S21_pr_pr -----------------------
S21_big_array=zeros(init_data.num_modes,init_data.num_modes,no_of_thick_slabs);
trans_tot_big=zeros(1,no_of_thick_slabs);
for scount=1:no_of_thick_slabs
filename=sprintf('S21_cas_%d.mat',scount)
load(filename);
S21_big_array(:,:,scount)=S21_cas;
trans_tot_big(scount)=trace(S21_cas(1:init_data.num_modes_prop,...
    1:init_data.num_modes_prop)'*S21_cas(1:init_data.num_modes_prop,...
    1:init_data.num_modes_prop))/init_data.num_modes_prop
end
sprintf('Ensemble averaged total transmission = %f',mean(trans_tot_big))
%------------ Eigen decomposition of S21_pr_pr : ensemble averaging -------
no_of_bins=100;
eigentransmission_store=zeros(no_of_thick_slabs,init_data.num_modes_prop);
midpoint_store=zeros(no_of_thick_slabs,no_of_bins-1);
hist_data_store=zeros(no_of_thick_slabs,no_of_bins-1);
trans_total=zeros(1,no_of_thick_slabs);

for scount=1:no_of_thick_slabs
scount
S21_prop=S21_big_array(1:init_data.num_modes_prop,1:init_data.num_modes_prop,scount);
[U,Sigma,V] = svd(S21_prop); 
[hist_data,x_hist] = histcounts(diag(Sigma.^2),linspace(0,1,no_of_bins), 'Normalization', 'pdf');
eigentransmission_store(scount,:)=diag(Sigma.^2);
mid_point = x_hist(1:end-1)+mean(diff(x_hist))/2;   
dtau=(mid_point(2)-mid_point(1));
[sum(mid_point.*hist_data.*dtau) mean(diag(Sigma.^2))] % Mean of the distribution
[sum(hist_data.*dtau) 1]  % Histogram is normalised to unity in a discrete sense
midpoint_store(scount,:)=mid_point;
hist_data_store(scount,:)=hist_data;
trans_total(scount)=trace(S21_prop'*S21_prop)/init_data.num_modes_prop;
end

figure('Position', [50 50 800 500],'color','W');
bar(mean(midpoint_store),mean(hist_data_store));
hold on
Tavg=mean(trans_total);
T=linspace(sech(1/Tavg)^2,0.99999,10^6);
dT=T(2)-T(1);
ptrans= @(T) (Tavg./(2.*T.*sqrt(1-T)));  %%% normalised eigen value density function 
plot(T,ptrans(T),'-r','LineWidth',3)
set(gca, 'YScale', 'log')
ylim([10^-1 200])
set(gca,'FontSize',20)
xlabel('$\tau$','Interpreter','Latex')
ylabel('$p(\tau)$','Interpreter','Latex')
legend('$Wave~transport~modelling$','$R.M.T$','Interpreter','Latex')


figure('Position', [50 50 800 500],'color','W');
tau_avg_ensemble=mean(eigentransmission_store,2); 
% eigenchannel transmission averaged over different modes for different disorders.
plot(1:no_of_thick_slabs,tau_avg_ensemble,'-*')
xlabel('Ensemble no')
ylabel('\tau_{avg}')
annotation('textbox', [0.2, 0.25, 0.001, 0.001], 'string', ...
    {sprintf('$<\\tau_{avg}> = %.4f$',mean(tau_avg_ensemble))},...
    'FontSize',14,'Interpreter','Latex','FitBoxToText','on');
set(gca,'FontSize',18)

%-------- Optional : To test the generalised reciprocity and unitarity
%---- Testing generalized reciprocity for the cascading -------------------
% clearvars S11 S11_1 S11_2 S11_cas S11_array S11_prop
% clearvars S21 S21_1 S21_2 S21_cas S21_array S21_prop S21_big_array
% clearvars S12 S12_1 S12_2 S12_cas S12_array S12_prop
% clearvars S22 S22_1 S22_2 S22_cas S22_array S22_prop
% 
% 
% ith_disorder_no=23; % select a disorder number ith to be tested
% %                    for the cascaded matrices 
% 
% load(sprintf('S11_cas_%d.mat',ith_disorder_no));
% load(sprintf('S12_cas_%d.mat',ith_disorder_no));
% load(sprintf('S21_cas_%d.mat',ith_disorder_no));
% load(sprintf('S22_cas_%d.mat',ith_disorder_no));
% 
% generalised_reciprocity_and_unitarity_validation(S11_cas,S12_cas,...
%    S21_cas,S22_cas,init_data);

if new_run_flag==0
   cascaded_sample=zeros(size(eps_profile_array,1),...
       size(eps_profile_array,2)*size(eps_profile_array,3));
   for icount=1:size(eps_profile_array,3)
   zindex=(icount-1)*size(eps_profile_array,2)+1 : (icount)*size(eps_profile_array,2);
   cascaded_sample(:,zindex)=eps_profile_array(:,:,icount);
   end
script_plotting_disorders
end    

%------------------- Ensemble averaging of optimal transmission -----------
script_single_mode_focussing_ens_averaging






